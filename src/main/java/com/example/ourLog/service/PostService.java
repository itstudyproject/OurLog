package com.example.ourLog.service;

import com.example.ourLog.dto.*;
import com.example.ourLog.entity.*;

import java.util.*;
import java.util.stream.Collectors;

public interface PostService {

  // PostService.java
  PageResultDTO<PostDTO, Object[]> getList(PageRequestDTO pageRequestDTO, Long boardNo);

  // üî• Ïù∏Í∏∞Ïàú Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå (Ï°∞ÌöåÏàò Í∏∞Ï§Ä)
//  PageResultDTO<PostDTO, Object[]> getPopularList(PageRequestDTO pageRequestDTO);


  Long register(PostDTO postDTO);

  PostDTO get(Long postId);

  void modify(PostDTO postDTO);

  List<String> removeWithReplyAndPicture(Long postId);

  void removePictureByUUID(String uuid);

  // ‚úÖ Ï†ÑÏ≤¥ Í≤åÏãúÍ∏Ä Í∞ÄÏ†∏Ïò§Í∏∞ (ÌéòÏù¥Ïßï ÏóÜÏù¥)
  List<PostDTO> getAllPosts();

  List<PostDTO> getPostByUserId(Long userId);

  default Map<String, Object> dtoToEntity(PostDTO postDTO) {
    Map<String, Object> entityMap = new HashMap<>();


    Post post = Post.builder()
        .postId(postDTO.getPostId())
        .title(postDTO.getTitle())
        .content(postDTO.getContent())
        .tag(postDTO.getTag())
        .fileName(postDTO.getFileName())
        .boardNo(postDTO.getBoardNo())
        .user(User.builder()
            .userId(postDTO.getUserId())
            .nickname(postDTO.getNickname())
            .build())
        .build();

    entityMap.put("post", post);

    List<PictureDTO> pictureDTOList = postDTO.getPictureDTOList();
    if (pictureDTOList != null && !pictureDTOList.isEmpty()) {
      List<Picture> pictureList = pictureDTOList.stream()
          .map(dto -> Picture.builder()
              .uuid(dto.getUuid())
              .picName(dto.getPicName())
              .path(dto.getPath())
              .post(null)
              .build())
          .collect(Collectors.toList());
      entityMap.put("pictureList", pictureList);
    }

    return entityMap;
  }

  // ‚ú® Entity ‚Üí DTO Î≥ÄÌôò

  default PostDTO entityToDTO(Post post, List<Picture> pictureList, User user, Trade trade) {
    // Ïú†Ï†Ä DTO ÏÉùÏÑ±
    UserDTO userDTO = UserDTO.builder()
        .userId(user.getUserId())
        .nickname(user.getNickname())
        .build();

    // üî• Ïú†Ï†Ä ÌîÑÎ°úÌïÑ DTO ÏÉùÏÑ±
    UserProfileDTO userProfileDTO = null;
    if (post.getUserProfile() != null) {
      User profileUser = post.getUserProfile().getUser();
      userProfileDTO = UserProfileDTO.builder()
          .profileId(post.getUserProfile().getProfileId())
          .userId(profileUser.getUserId()) // ‚úÖ ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ
          .introduction(post.getUserProfile().getIntroduction())
          .originImagePath(post.getUserProfile().getOriginImagePath())
          .thumbnailImagePath(post.getUserProfile().getThumbnailImagePath())
          .build();
    }

    // ‚úÖ Trade ÏóîÌã∞Ìã∞Í∞Ä nullÏù¥ ÏïÑÎãàÎ©¥ TradeDTO ÏÉùÏÑ±ÌïòÏó¨ ÏÑ§Ï†ï
    TradeDTO tradeDTO = null;
    if (trade != null) {
      // Trade ÏóîÌã∞Ìã∞Ïùò user ÌïÑÎìúÏóêÏÑú ÌåêÎß§Ïûê IDÏôÄ ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò§Í∏∞
      Long sellerId = trade.getUser() != null ? trade.getUser().getUserId() : null;
      // ÌåêÎß§Ïûê ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò§Í∏∞ (DTOÏóê sellerNicknameÏù¥ ÏûàÎã§Î©¥)
      // String sellerNickname = trade.getUser() != null ? trade.getUser().getNickname() : null;

      // ÏµúÏã† ÏûÖÏ∞∞Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (bidHistory Ïª¨Î†âÏÖòÏóêÏÑú ÏµúÏã† Bid Ï∞æÍ∏∞)
      Long bidderId = null;
      String bidderNickname = null;
      // Trade ÏóîÌã∞Ìã∞Ïóê Bid Î™©Î°ùÏù¥ Î°úÎî©ÎêòÏñ¥ ÏûàÎã§Î©¥ (fetch type Ï£ºÏùò)
      if (trade.getBidHistory() != null && !trade.getBidHistory().isEmpty()) {
        // bidHistoryÎäî Ï†ïÎ†¨ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏùÑ Ïàò ÏûàÏúºÎØÄÎ°ú Í∞ÄÏû• ÏµúÍ∑º ÏûÖÏ∞∞ÏùÑ Ï∞æÏïÑÏïº Ìï®
        // Bid ÏóîÌã∞Ìã∞Ïóê ÏûÖÏ∞∞ ÏãúÍ∞Ñ ÌïÑÎìúÍ∞Ä ÏûàÎã§Î©¥ Í∑∏ Í∏∞Ï§ÄÏúºÎ°ú Ï†ïÎ†¨
        // Ïó¨Í∏∞ÏÑúÎäî ÏòàÏãúÎ°ú Î™©Î°ùÏùò ÎßàÏßÄÎßâ ÏöîÏÜå (Í∞ÄÏû• ÏµúÍ∑ºÏóê Ï∂îÍ∞ÄÎêú Í≤ÉÏúºÎ°ú Í∞ÄÏ†ï) ÏÇ¨Ïö© ÎòêÎäî Î≥ÑÎèÑÏùò Î°úÏßÅ ÌïÑÏöî
        Bid latestBid = trade.getBidHistory().stream()
            .max(Comparator.comparing(Bid::getBidTime)) // Bid ÏóîÌã∞Ìã∞Ïóê getBidTime() Î©îÏÑúÎìúÍ∞Ä ÏûàÎã§Í≥† Í∞ÄÏ†ï
            .orElse(null);
        if (latestBid != null && latestBid.getUser() != null) {
          bidderId = latestBid.getUser().getUserId();
          bidderNickname = latestBid.getUser().getNickname();
        }
      }
      tradeDTO = TradeDTO.builder()
          .tradeId(trade.getTradeId())
          .postId(trade.getPost() != null ? trade.getPost().getPostId() : null) // Post Í∞ùÏ≤¥ÏóêÏÑú postId Í∞ÄÏ†∏Ïò§Í∏∞
          .sellerId(sellerId)
          .bidderId(bidderId)
          .bidderNickname(bidderNickname)
          .startPrice(trade.getStartPrice())
          .highestBid(trade.getHighestBid())
          .nowBuy(trade.getNowBuy())
          .tradeStatus(trade.isTradeStatus())
          .startBidTime(trade.getRegDate())
          .lastBidTime(trade.getEndTime())
          .build();
    }

    // PostDTO ÏÉùÏÑ±
    PostDTO postDTO = PostDTO.builder()
        .postId(post.getPostId())
        .title(post.getTitle())
        .content(post.getContent())
        .tag(post.getTag())
        .fileName(post.getFileName())
        .boardNo(post.getBoardNo())
        .replyCnt(post.getReplyCnt())
        .views(post.getViews())
        .followers(post.getFollowers())
        .downloads(post.getDownloads())
        .userId(post.getUser().getUserId())
        .nickname(post.getUser().getNickname())
        .favoriteCnt(Favorite.builder()
            .build().getFavoriteCnt())
        .profileImage(post.getUserProfile() != null ? post.getUserProfile().getThumbnailImagePath() : null)
        // ‚úÖ thumbnailImagePath ÏÑ§Ï†ï: pictureListÏóêÏÑú Ïç∏ÎÑ§Ïùº Í≤ΩÎ°ú Ï∞æÍ∏∞
        .thumbnailImagePath(pictureList != null ?
            pictureList.stream()
                .filter(p -> p != null && p.getThumbnailImagePath() != null)
                .findFirst() // Ï≤´ Î≤àÏß∏ Ïç∏ÎÑ§Ïùº Ï∞æÍ∏∞
                .map(p -> {
                  return p.getThumbnailImagePath();
                })
                .orElse(null) // Ïç∏ÎÑ§Ïùº ÏóÜÏúºÎ©¥ null
            : null)
        // Ï§ëÍ∞Ñ ÌÅ¨Í∏∞ Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú ÏÑ§Ï†ï
        .resizedImagePath(pictureList != null ?
            pictureList.stream()
                .filter(p -> p != null && p.getResizedImagePath() != null)
                .findFirst()
                .map(Picture::getResizedImagePath)
                .orElse(null)
            : null)
        // ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú ÏÑ§Ï†ï
        .originImagePath(pictureList != null ?
            pictureList.stream()
                .filter(Objects::nonNull)
                .map(Picture::getOriginImagePath)
                .filter(Objects::nonNull)
                .collect(Collectors.toList())
            : null)
        .tradeDTO(tradeDTO)
        .regDate(post.getRegDate())
        .modDate(post.getModDate())
        .build();

    if (post.getUserProfile() != null) {
      System.out.println("== userProfile is not null ==");
      System.out.println("== nickname: " + post.getUserProfile().getUser().getNickname());
    }

    if (pictureList != null && !pictureList.isEmpty()) {
      List<PictureDTO> pictureDTOList = pictureList.stream()
          .filter(p -> p != null)
          .map(p -> PictureDTO.builder()
              .uuid(p.getUuid())
              .picName(p.getPicName())
              .path(p.getPath())
              .originImagePath(p.getOriginImagePath())
              .thumbnailImagePath(p.getThumbnailImagePath())
              .resizedImagePath(p.getResizedImagePath())
              .build())
          .collect(Collectors.toList());

      postDTO.setPictureDTOList(pictureDTOList);
    }

    return postDTO;
  }


  void increaseViews(Long postId);
}
